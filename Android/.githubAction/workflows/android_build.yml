# 配置GitHub Action
name: Auto Build Android APK

# 此关键字定义了何时触发工作流
on:
  push:
    paths-ignore:
      - '*.md'
    branches:
      - net-master-keaikeqing
  workflow_dispatch:  # 此处的 workflow_dispatch 表示手动触发

# 此关键字定义了工作流中的任务
jobs:
  # 此处的 "build" 为自定义名称，可随意修改
  build:
    # 此关键字定义了工作流运行的环境
    runs-on: ubuntu-latest

    # 此关键字定义了工作流中的步骤
    steps:


      # 检出代码
      - name: Check out code
        uses: actions/checkout@v3


      # 设置JDK环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle


      # 进一步存储构建缓存
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path:
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
            app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys:
            ${{ runner.os }}-gradle-


      # 获取密钥
      - name: Get Keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -di > app/AndroidKeystore.jks


      # 赋予Gradle执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 执行Gradle构建
      - name: Build with Gradle
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run:
          ./gradlew assembleRelease

      # 上传APK-armv8到工作流
      - name: Upload APK-armv8 to Workflow Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-arm64-v8a
          path: app/build/outputs/apk/release/*-arm64-v8a-release.apk